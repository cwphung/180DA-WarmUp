import numpy as np
import paho.mqtt.client as mqtt
import time

userMoves = {}
userMoves["turner"] = 0
userMoves["corwin"] = 0
userPlayed = {}
userPlayed["turner"] = 0
userPlayed["corwin"] = 0
userWins = {}
userWins["turner"] = 0
userWins["corwin"] = 0

# 0. define callbacks - functions that run when events happen.
# The callback for when the client receives a CONNACK response from the server.
def on_connect(client, userdata, flags, rc):
    print("Connection returned result: " + str(rc))
    # Subscribing in on_connect() means that if we lose the connection and
    # reconnect then subscriptions will be renewed.
    client.subscribe("ece180d/test/ahh/#", qos=1)

# The callback of the client when it disconnects.
def on_disconnect(client, userdata, rc):
    if rc != 0:
        print('Unexpected Disconnect')
    else:
        print('Expected Disconnect')
              
# The default message callback.
# (you can create separate callbacks per subscribed topic)
def on_message(client, userdata, message):
    topics = message.topic.split('/')
    if topics[-1] != 'server':
        int_move = (int)(message.payload)
        if (int_move == 1 or int_move == 2 or int_move == 3):
            userPlayed[topics[-1]] = 1
            userMoves[topics[-1]] = int_move
        

# 1. create a client instance.
client = mqtt.Client()
# add additional client options (security, certifications, etc.)
# many default options should be good to start off.
# add callbacks to client.
client.on_connect = on_connect
client.on_disconnect = on_disconnect
client.on_message = on_message
# 2. connect to a broker using one of the connect*() functions.
# client.connect_async("test.mosquitto.org")
client.connect_async('mqtt.eclipseprojects.io')
# client.connect("test.mosquitto.org", 1883, 60)
# client.connect("mqtt.eclipse.org")
# 3. call one of the loop*() functions to maintain network traffic flow with the broker.
client.loop_start()
# client.loop_forever()

def getmove(movenum):
    if movenum==1:
        return ' played rock'
    if movenum==2:
        return ' played paper'
    if movenum==3:
        return ' played scissors'

while(True):
    client.publish("ece180d/test/ahh/server", 'Users play Rock (1), Paper (2), or Scissors (3)', qos=1)
    while not(userPlayed["turner"] == 1 and userPlayed["corwin"] == 1):
        time.sleep(0.1)
    if (userPlayed["turner"] == 1 and userPlayed["corwin"] == 1):
        client.publish("ece180d/test/ahh/server", ('Turner' + getmove(userMoves["turner"])), qos=1)
        time.sleep(0.1)
        client.publish("ece180d/test/ahh/server", ('Corwin' + getmove(userMoves["corwin"])), qos=1)
        if ((userMoves["turner"]==userMoves["corwin"]+1)or(userMoves["turner"]==1 and userMoves["corwin"]==3)):
            client.publish("ece180d/test/ahh/server", ('Turner wins!'), qos=1)
            userWins["turner"] += 1
        elif (userMoves["turner"]==userMoves["corwin"]):
            client.publish("ece180d/test/ahh/server", ('Tie!'), qos=1)
        else:
            client.publish("ece180d/test/ahh/server", ('Corwin wins'), qos=1)
            userWins["corwin"] += 1
        client.publish("ece180d/test/ahh/server", ('Turner total wins: ' + str(userWins["turner"])), qos=1)
        client.publish("ece180d/test/ahh/server", ('Corwin total wins: ' + str(userWins["corwin"])), qos=1)
        userPlayed["turner"] = 0
        userPlayed["corwin"] = 0
        

# use subscribe() to subscribe to a topic and receive messages.
# use publish() to publish messages to the broker.
# use disconnect() to disconnect from the broker.

client.loop_stop()
client.disconnect()